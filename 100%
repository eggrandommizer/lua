-- Put this in ServerScriptService as "PetRandomizer"
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local PetData = require(ReplicatedStorage:WaitForChild("PetData"))

-- Remote Events
local remoteEvents = Instance.new("Folder")
remoteEvents.Name = "RemoteEvents"
remoteEvents.Parent = ReplicatedStorage

local hatchEggRemote = Instance.new("RemoteEvent")
hatchEggRemote.Name = "HatchEgg"
hatchEggRemote.Parent = remoteEvents

local predictEggRemote = Instance.new("RemoteFunction")
predictEggRemote.Name = "PredictEgg"
predictEggRemote.Parent = remoteEvents

-- Pet Randomizer Functions
local function getRandomPet()
    local totalChance = 0
    for , pet in pairs(PetData.Pets) do
        totalChance = totalChance + pet.chance
    end

    local randomValue = math.random() * totalChance
    local currentChance = 0

    for , pet in pairs(PetData.Pets) do
        currentChance = currentChance + pet.chance
        if randomValue <= currentChance then
            return pet
        end
    end

    -- Fallback to first pet
    return PetData.Pets[1]
end

local function predictNextPets(count)
    local predictions = {}
    for i = 1, count do
        table.insert(predictions, getRandomPet())
    end
    return predictions
end

-- Handle egg hatching
hatchEggRemote.OnServerEvent:Connect(function(player)
    local pet = getRandomPet()

    -- Here you would save the pet to the player's data
    print(player.Name .. " hatched a " .. pet.rarity .. " " .. pet.name .. "!")

    -- Send pet back to client
    hatchEggRemote:FireClient(player, pet)
end)

-- Handle egg prediction
predictEggRemote.OnServerInvoke = function(player, count)
    count = math.min(count or 5, 10) -- Limit to 10 predictions max
    return predictNextPets(count)
end
